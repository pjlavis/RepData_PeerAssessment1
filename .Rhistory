install.packages("KernSmooth")
install.packages("ggplot2")
library(KernSmooth)
library(ggplot2)
f <- function(x, y) {
x + y
}
f(3,5)
above <- function(x, n) {
use <- x > n
x[use]
}
t <- 1:12
t
above(t,6)
above(t)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(t)
Colmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
?mean
cube <- function(x, n) {
x^3
}
cube(3)
.
cube(3)
cube <- function(x, n) {
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
environments
environments()
search()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?lattice
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(swirl)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
mydy <- read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dpylr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
ilter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran,size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?groupby
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, size_mean = mean(size))
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count < 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
select(cran, ip_id, country, package, size)
submit()
reset()
submit()
submit()
submit()
skip()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,male, female)
gather(students,male, female, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res,sex_class,c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
skip()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, passed = "passed")
mutate(passed, ststus = "passed")
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
rbind_list(passed, failed)
sat
?contains
?select
submit()
submit()
exit
exit()
library(swirl)
swirl()
install.packages("lubridate")
install.packages("memoise")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment,now())
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now()
nyc <- Now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
install.packages("RMySQL")
source("RMySQL")
sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /Library/Frameworks/R.framework/Resources/lib/libmysqlclient.18.dylib
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
soucre("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
x <- read.fwf(file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),skip=4,widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(x[,4])
head(x)
View(x)
View(x)
install.packages("sqldf")
acs <- read.csv(file = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs <- read.csv(file = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", method = "curl")
?read.csv
acs <- read.csv(file = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
colnames(acs)
# Summarise data for intervals with average interval steps
setwd("./Documents/Reproducable Research")
# Import data
data <- read.csv("activity.csv")
# Summarise data for total steps in day using dplyr package
library(dplyr)
Step_sum <- group_by(data, date) %>%
summarise(daysum = sum(steps))
# Histogram of daily data
hist(Step_sum$daysum, xlab = "Total steps in day", col = "red", main = "Histogram of total steps in day")
# Mean and median of total steps taken per day
mean(Step_sum$daysum, na.rm = TRUE)
median(Step_sum$daysum, na.rm = TRUE)
# Summarise data for intervals with average interval steps
Interval_Avg <- group_by(data, interval) %>%
summarise(intavg = mean(steps, na.rm = TRUE))
plot(Interval_Avg$interval, Interval_Avg$intavg, type = "n", xlab = "5 min Interval", ylab = "Average steps per interval", main = "Average number of steps per interval")
lines(Interval_Avg$interval, Interval_Avg$intavg)
# Return interval with largest average
Interval_Avg[ match(max(Interval_Avg$intavg),Interval_Avg$intavg), 1]
# Total number of NA
sum(is.na(data$steps))
# Replace NA values with average for interval time
library(data.table)
DT <- data.table(data)
setkey(DT, interval)
DT[,steps := ifelse(is.na(steps), median(steps, na.rm=TRUE), steps), by=interval]
Clean_Step_sum <- group_by(DT, date) %>%
summarise(cleandaysum = sum(steps))
Clean_Step_sum <- group_by(DT, date) %>%
summarise(cleandaysum = sum(steps))
hist(Clean_Step_sum$cleandaysum, xlab = "Total steps in day", col = "red", main = "Histogram of total steps in day")
mean(Clean_Step_sum$cleandaysum, na.rm = TRUE)
median(Clean_Step_sum$cleandaysum, na.rm = TRUE)
hist(Step_sum$daysum, xlab = "Total steps in day", col = "red", main = "Histogram of total steps in day")
Week_Data <- mutate(DT, day = ifelse( weekdays(DT$date) == 1 | weekdays(DT$date) == 7 , "Weekend" , "Weekday" ))
Week_Data <- mutate(DT, day = ifelse( weekdays(as.date(DT$date) == 1 | weekdays(as.date(DT$date) == 7 , "Weekend" , "Weekday" ))
Week_Data <- mutate(DT, day = ifelse( weekdays(as.date(DT$date) == 1 | weekdays(as.date(DT$date) == 7 , "Weekend" , "Weekday" ))
Week_Data <- mutate(DT, day = ifelse( weekdays(as.date(DT$date) == 1 | weekdays(as.date(DT$date) == 7 , "Weekend" , "Weekday" ))
Week_Data <- mutate(DT, day = ifelse( weekdays(as.date(DT$date) == 1 | weekdays(as.date(DT$date) == 7 , "Weekend" , "Weekday" ))))
?weekdays
weekdays(DT$date)
weekdays(as.date(DT$date))
head(DT)
weekdays(DT[1,2])
Week_Data <- mutate(DT, day = ifelse( weekdays(as.date(DT$date) == "Sat" | weekdays(as.date(DT$date) == "Sun" , "Weekend" , "Weekday" ))))
Week_Data <- mutate(DT, day = ifelse( weekdays(DT$date) == "Sat" | weekdays(DT$date) == "Sun" , "Weekend" , "Weekday" ))
Week_Data <- mutate(DT, day = ifelse( weekdays(date) == "Sat" | weekdays(date) == "Sun" , "Weekend" , "Weekday" ))
?mutate
head(DT)
?weekday
Week_Data <- mutate(DT, day = ifelse( weekdays(ymd(date) == "Sat" | weekdays(ymd(date) == "Sun" , "Weekend" , "Weekday" ))
)
)
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Week_Data <- mutate(DT, day = ifelse( weekdays(ymd(date) == "Sat" | weekdays(ymd(date) == "Sun" , "Weekend" , "Weekday" ))))
?ifelse
Week_Data <- mutate(DT, day = ifelse( weekdays(ymd(date)) == "Sat" | weekdays(ymd(date)) == "Sun" , "Weekend" , "Weekday" ))))
Week_Data <- mutate(DT, day = ifelse( weekdays(ymd(date)) == "Sat" | weekdays(ymd(date)) == "Sun" , "Weekend" , "Weekday" ))
View(Week_Data)
weekdays(ymd(DT[1,2]))
weekdays((DT[1,2]))
ymd(DT$date)
Week_Data <- mutate(DT, day = ifelse( wday(ymd(date)) == 1 | wday(ymd(date)) == 7 , "Weekend" , "Weekday" ))
View(Week_Data)
Weekday_avg <- group_by(Week_Data, day) %>%
summarise(cleandaysum = sum(steps))
Weekday_avg <- group_by(Week_Data, day, interval) %>%
summarise(cleandaysum = sum(steps))
View(Weekday_avg)
Weekday_avg <- group_by(Week_Data, day, interval) %>%
summarise(avgsteps = mean(steps))
View(Weekday_avg)
xyplot(Weekday_avg$interval,Weekday_avg$avgsteps | day)
?lattice
library(lattice)
xyplot(Weekday_avg$interval,Weekday_avg$avgsteps | day)
xyplot(interval,avgsteps | day, Weekday_avg)
xyplot(avgsteps ~ interval | day, Weekday_avg)
?xyline
xyplot(avgsteps ~ interval | day, data = Weekday_avg, type = "b")
xyplot(avgsteps ~ interval | day, data = Weekday_avg, type = "c")
xyplot(avgsteps ~ interval | day, data = Weekday_avg, type = "a")
install.packages(c("boot", "class", "cluster", "codetools", "jsonlite", "KernSmooth", "labeling", "MASS", "Matrix", "mgcv", "nlme", "Rcpp", "rmarkdown", "testthat"))
